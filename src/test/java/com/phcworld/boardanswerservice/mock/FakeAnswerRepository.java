package com.phcworld.boardanswerservice.mock;

import com.phcworld.boardanswerservice.domain.Answer;
import com.phcworld.boardanswerservice.service.port.AnswerRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeAnswerRepository implements AnswerRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Answer> data = new ArrayList<>();

    @Override
    public List<Answer> findByWriterId(String userId) {
        return data.stream().filter(answer -> answer.getWriterId().equals(userId)).toList();
    }

    @Override
    public List<Answer> findByFreeBoardIdAndIsDeleted(Long boardId, boolean isDelete) {
        return data.stream()
                .filter(answer -> answer.getFreeBoardId().equals(boardId) && !answer.isDeleted())
                .toList();
    }

    @Override
    public Optional<Answer> findByAnswerId(String answerId) {
        return data.stream().filter(answer -> answer.getAnswerId().equals(answerId)).findAny();
    }

    @Override
    public Answer save(Answer answer) {
        if(answer.getId() == null || answer.getId().equals(0L)){
            Answer newAnswer = Answer.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .contents(answer.getContents())
                    .writerId(answer.getWriterId())
                    .answerId(answer.getAnswerId())
                    .freeBoardId(answer.getFreeBoardId())
                    .createDate(answer.getCreateDate())
                    .updateDate(answer.getUpdateDate())
                    .isDeleted(answer.isDeleted())
                    .build();
            data.add(newAnswer);
            return newAnswer;
        } else {
            data.removeIf(f -> Objects.equals(f.getId(), answer.getId()));
            data.add(answer);
            return answer;
        }
    }
}
